/**
 \mainpage hpp-manipulation documentation
 \anchor hpp_manipulation_documentation

 \par Introduction

 This package implements a solver for manipulation planning problems. A
 manipulation planning problem is defined by:
 \li Device: a collection of several \LPinocchio{Device} with \ref Gripper
 "grippers" and \ref Handle "handles",
 \li Graph: A graph of constraints defining the rules of a manipulation
 problem.

 ManipulationPlanner implements a RRT-based algorithm to solve manipulation
 planning problems.

 \par Constraint graph
 The graph of constraint, also referred to as constraint graph, represents the
 rules of a manipulation problem.  The component of the graph are:
 \li State represents a state of the Robot with constraints,
 \li Edge represents a transition between two State with parametric constraints.

 State contains a set of \LHPP{core,Constraint} that a configuration of the
 Robot should satisfy to be in the represented state. To ensure that a
 configuration is in only one state, the State are ordered in a StateSelector.
 The method StateSelector::getState(ConfigurationIn_t) const returns a pointer to
 the first State for which State::contains(ConfigurationIn_t) const returns true.
 For optimization only, another set of \LHPP{core,Constraint} is used for
 \LHPP{core,StraightPath} lying in this State.

 Edge has methods Edge::state() to tell in which State a corresponding path lyes
 Edge also contains two sets of \LHPP{core,Constraint}:
 \li Edge::configConstraint() returns a \LHPP{core,ConstraintSet} used to
     generate a configuration lying in Edge::to() and respecting the
     \LHPP{core,ConfigProjector::rightHandSide},
 \li Edge::pathConstraint() returns a \LHPP{core,ConstraintSet} to be inserted
     in \LHPP{core,Path} represented by this Edge.

 \note
   For implementation details, see graph::Graph.
   For more information about parametric and non-parametric constraints, see
   \LHPP{core,DifferentiableFunction} and \LHPP{core,ConfigProjector}

 \par Manipulation planner

 ManipulationPlanner class implements an algorithm based on RRT. See
 <a href="ObjectManipulation_MasterThesis_JosephMirabel.pdf">this master
 thesis</a> for details about the algorithm.

 **/
